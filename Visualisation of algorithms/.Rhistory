)
write.table(
logFCdata, file = "logfc.tsv",
sep = "\t",
col.names = c("ChEBI", "logFC"),
row.names = FALSE, quote = FALSE
)
individual <- rep(1:20,rep(2,20))
individual
abs <- rnorm(n = 10, mean = 0, sd = 1)
years <- seq(from = 2010, to = 2019, by = 1)
my_data <- data.frame(observance, years)
my_data <- data.frame(abs, years)
View(my_data)
my_data$years <- as.factor(my_data$years)
boxplot(my_data)
transposed_data <- as.data.frame(t(my_data))
boxplot(transposed_data)
View(transposed_data)
my_data <- data.frame(years, abs)
my_data$years <- as.factor(my_data$years)
transposed_data <- as.data.frame(t(my_data))
boxplot(transposed_data)
View(transposed_data)
plot_data <- transposed_data[:,2]
plot_data <- transposed_data(:,2)
plot_data <- transposed_data(,2)
plot_data <- transposed_data[,2]
View(transposed_data)
plot_data <- as.data.frame(transposed_data[,2])
View(plot_data)
plot_data <- as.data.frame(transposed_data[2,])
View(plot_data)
colnames(plot_data)<- transposed_data[1,]
boxplot(plot_data)
View(plot_data)
boxplot(plot_data)
plot_data <- as.matrix(transposed_data[2,])
colnames(plot_data)<- transposed_data[1,]
boxplot(plot_data)
boxplot(t(plot_data)
boxplot(t(plot_data)
t(plot_data
boxplot(t(plot_data))
boxplot(t(plot_data))
View(plot_data)
my_data <- data.frame(years, abs)
View(my_data)
View(my_data)
plot_data <- as.matrix(transposed_data[2,],as.matrix(transposed_data[2,])
View(plot_data)
plot_data <- as.matrix(transposed_data[2,],as.matrix(transposed_data[2,])
plot_data <- as.matrix(transposed_data[2,],as.matrix(transposed_data[2,]))
plot_data <- rbind(plot_data, plot_data[rep(1, 5), ])
plot_data[rep(1, 5)
plot_data[rep(1, 5)]
plot_data[rep(1, 5), ]
sample(plot_data[rep(1, 5), ])
plot_data <- as.matrix(transposed_data[2,])
plot_data <- rbind(plot_data, sample(plot_data[rep(1, 5), ]))
plot_data <- sample(plot_data)
plot_data <- dataframe[sample(1:nrow(dataframe)), ]
plot_data <- plot_data[sample(1:nrow(plot_data)), ]
nrow(plot_data)
transposed_data <- as.data.frame(t(my_data))
plot_data <- as.matrix(transposed_data[2,])
plot_data <- rbind(plot_data, plot_data[rep(1, 5), ])
plot_data <- plot_data[sample(1:nrow(plot_data)), ]
boxplot((plot_data))
View(plot_data)
View(transposed_data)
colnames(plot_data)<- my_data$years
boxplot((plot_data),)
View(plot_data)
df <- data.frame(year = c(2010, 2011, 2012, 2010, 2011, 2012),
value = c(10, 20, 30, 40, 50, 60))
library(tidyr)
df_wide <- pivot_wider(df, names_from = year, values_from = value)
View(df_wide)
View(df)
View(df_wide)
library(tidyverse)
# Create an example dataframe
df <- data.frame(year = c(2010, 2011, 2012, 2010, 2011, 2012),
value = c(10, 20, 30, 40, 50, 60))
# Reshape the dataframe
df_reshaped <- pivot_wider(df, names_from = year, values_from = value)
# Print the reshaped dataframe
print(df_reshaped)
View(df_reshaped)
df_reshaped <- df_reshaped %>% spread(year, value)
df_reshaped <- df %>% spread(year, value)
View(df_reshaped)
View(df_reshaped)
df_reshaped <- spread(df_reshaped)
View(df_reshaped)
library(tidyverse)
# Create an example dataframe
df <- data.frame(year = c(2010, 2011, 2012, 2010, 2011, 2012),
value = c(10, 20, 30, 40, 50, 60))
# Reshape the dataframe
df_pivot <- pivot_wider(df, names_from = year, values_from = value)
# Reshape the dataframe using spread
df_reshaped <- df_pivot %>%
gather(year, value, -1) %>%
spread(year, value)
View(df_pivot)
View(df_reshaped)
View(df_wide)
View(df_reshaped)
library(tidyverse)
library(tidyverse)
# Reshape the dataframe
df_reshaped <- spread(df, years, values)
library(tidyverse)
# Create an example dataframe
df <- data.frame(year = c(2010, 2011, 2012, 2010, 2011, 2012),
value = c(10, 20, 30, 40, 50, 60))
# Reshape the dataframe
df_reshaped <- spread(df, years, values)
# Reshape the dataframe
df_reshaped <- spread(df, year, value)
# Create an example dataframe
df <- data.frame(year = c(2010, 2011, 2012, 2010, 2011, 2012),
value = c(10, 20, 30, 40, 50, 60))
View(df)
library(tidyverse)
df <- data.frame(
values = c(10, 20, 30, 40, 50, 60),
years = c(2010, 2010, 2011, 2011, 2012, 2012)
)
# Add a row number column to uniquely identify each row
df$row_number <- seq_len(nrow(df))
# Reshape the dataframe
df_reshaped <- spread(df, years, values)
# Print the reshaped dataframe
print(df_reshaped)
View(df_reshaped)
install.packages('SBMLR')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SBMLR")
library("SBMLR")
library(hipathia)
pathways <- load_pathways(species = "hsa")
list<- get_pathways_list(pathways)
list
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.17")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("hipathia")
n
library(hipathia)
library(readr)
library(readxl)
kill
upgrade_graph()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("igraph")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("igraph",force=TRUE)
library(hipathia)
shiny::runApp('Documents/Systems Biology/Programming/project')
runApp('Documents/Systems Biology/Programming/project')
runApp('Documents/Systems Biology/Programming/project')
runApp('Documents/Systems Biology/Programming/project')
shiny::runApp('Documents/Systems Biology/Programming/project')
shiny::runApp('COVID-19_fatal_cases_research_study')
Wine <- read_excel("Wine.xlsx", col_names = FALSE)
Wine <- read_excel("/Users/alejandroadriaquelozano/Wine.xlsx", col_names = FALSE)
Wine <- read_excel("/Users/alejandroadriaquelozano/Downloads/Wine.xlsx", col_names = FALSE)
library("readxl")
Wine <- read_excel("/Users/alejandroadriaquelozano/Downloads/Wine.xlsx", col_names = FALSE)
principal_comp <- prcomp(Wine, scale. = FALSE)
plot(principal_comp$x[, 1], principal_comp$x[, 2], main = "PCA", xlab = "PC1", ylab = "PC2")
# Calculate the percentage of explained variance for each principal component
explained_var <- pca_result$sdev^2 / sum(pca_result$sdev^2) * 100
# Calculate the percentage of explained variance for each principal component
explained_var <- principal_comp$sdev^2 / sum(principal_comp$sdev^2) * 100
# Create a PCA plot
pca_data <- as.data.frame(principal_comp$x)
pcaPlot <- ggplot(pca_data, aes(x = PC1, y = PC2, color = Condition, shape = Tissue)) +
geom_point(size = 3) +
scale_shape_manual(values = c("circle", "triangle")) +
theme_minimal() +
geom_text(aes(label = rownames(pca_data)), size = 3, nudge_x = 0.1, nudge_y = -5) +
xlab(paste("PCA 1 (",round(explained_var[1],2),'%)')) +
ylab(paste("PCA 2 (",round(explained_var[2],2),'%)'))
pcaPlot <- ggplot(pca_data, aes(x = PC1, y = PC2, color = Condition, shape = Tissue)) +
geom_point(size = 3) +
scale_shape_manual(values = c("circle", "triangle")) +
theme_minimal() +
# geom_text(aes(label = rownames(pca_data)), size = 3, nudge_x = 0.1, nudge_y = -5) +
xlab(paste("PCA 1 (",round(explained_var[1],2),'%)')) +
ylab(paste("PCA 2 (",round(explained_var[2],2),'%)'))
library(ggplot2)
pcaPlot <- ggplot(pca_data, aes(x = PC1, y = PC2, color = Condition, shape = Tissue)) +
geom_point(size = 3) +
scale_shape_manual(values = c("circle", "triangle")) +
theme_minimal() +
# geom_text(aes(label = rownames(pca_data)), size = 3, nudge_x = 0.1, nudge_y = -5) +
xlab(paste("PCA 1 (",round(explained_var[1],2),'%)')) +
ylab(paste("PCA 2 (",round(explained_var[2],2),'%)'))
ggplot(pca_data, aes(x = PC1, y = PC2, color = Condition, shape = Tissue)) +
geom_point(size = 3) +
scale_shape_manual(values = c("circle", "triangle")) +
theme_minimal() +
# geom_text(aes(label = rownames(pca_data)), size = 3, nudge_x = 0.1, nudge_y = -5) +
xlab(paste("PCA 1 (",round(explained_var[1],2),'%)')) +
ylab(paste("PCA 2 (",round(explained_var[2],2),'%)'))
View(Wine)
pca_data$Sample <- c(1,1,1,1,2,2,2,2,2,3,3,3,3)
View(Wine)
Wine2 <- read_excel("/Users/alejandroadriaquelozano/Downloads/Wine-2.xlsx", col_names = FALSE)
Wine2[,14]
pca_data$Sample <- Wine2[,14]
ggplot(pca_data, aes(x = PC1, y = PC2, shape = Sample)) +
geom_point(size = 3) +
scale_shape_manual(values = c("circle", "triangle",'square')) +
theme_minimal() +
# geom_text(aes(label = rownames(pca_data)), size = 3, nudge_x = 0.1, nudge_y = -5) +
xlab(paste("PCA 1 (",round(explained_var[1],2),'%)')) +
ylab(paste("PCA 2 (",round(explained_var[2],2),'%)'))
View(pca_data)
ggplot(pca_data, aes(x = PC1, y = PC2, shape = Sample)) +
geom_point(size = 3) +
scale_shape_manual(values = c("circle", "triangle",'square')) +
theme_minimal() +
# geom_text(aes(label = rownames(pca_data)), size = 3, nudge_x = 0.1, nudge_y = -5) +
xlab(paste("PCA 1 (",round(explained_var[1],2),'%)')) +
ylab(paste("PCA 2 (",round(explained_var[2],2),'%)'))
ggplot(pca_data, aes(x = PC1, y = PC2, shape = Sample)) +
geom_point(size = 3) +
#scale_shape_manual(values = c("circle", "triangle",'square')) +
theme_minimal() +
# geom_text(aes(label = rownames(pca_data)), size = 3, nudge_x = 0.1, nudge_y = -5) +
xlab(paste("PCA 1 (",round(explained_var[1],2),'%)')) +
ylab(paste("PCA 2 (",round(explained_var[2],2),'%)'))
pca_data$Sample <- as.char(Wine2[,14])
pca_data$Sample <- as.character(Wine2[,14])
ggplot(pca_data, aes(x = PC1, y = PC2, shape = Sample)) +
geom_point(size = 3) +
scale_shape_manual(values = c("circle", "triangle",'square')) +
theme_minimal() +
# geom_text(aes(label = rownames(pca_data)), size = 3, nudge_x = 0.1, nudge_y = -5) +
xlab(paste("PCA 1 (",round(explained_var[1],2),'%)')) +
ylab(paste("PCA 2 (",round(explained_var[2],2),'%)'))
ggplot(pca_data, aes(x = PC1, y = PC2, shape = Sample)) +
geom_point(size = 3) +
scale_shape_manual(values = c("circle", "triangle",'square')) +
theme_minimal() +
# geom_text(aes(label = rownames(pca_data)), size = 3, nudge_x = 0.1, nudge_y = -5) +
xlab(paste("PCA 1 (",round(explained_var[1],2),'%)')) +
ylab(paste("PCA 2 (",round(explained_var[2],2),'%)'))
pca_data$Sample <- as.character(Wine2[,14])
pca_data$Sample <- (Wine2[,14])
ggplot(pca_data, aes(x = PC1, y = PC2, shape = Sample)) +
geom_point(size = 3) +
scale_shape_manual(values = c("circle", "triangle",'square')) +
theme_minimal() +
# geom_text(aes(label = rownames(pca_data)), size = 3, nudge_x = 0.1, nudge_y = -5) +
xlab(paste("PCA 1 (",round(explained_var[1],2),'%)')) +
ylab(paste("PCA 2 (",round(explained_var[2],2),'%)'))
pca_data$Sample <- character(Wine2[,14])
character(Wine2[,14])
pca_data$Sample <-
lol<- (Wine2[,14])
View(lol)
pca_data$Sample <-
lol<- string(Wine2[,14])
pca_data$Sample <-
lol<- String(Wine2[,14])
pca_data$Sample <-
lol<- toString(Wine2[,14])
toString(Wine2[,14])
lol<- (Wine2[,14])
pca_data$Sample <- toString(lol)
lol<- paste(Wine2[,14],collapse = ' ')
pca_data$Sample <- paste(lol,collapse = ' ')
lol<- (Wine2[,14])
pca_data$Sample <- paste(lol,collapse = ' ')
samples<- (Wine2[,14])
pca_data$Sample <- paste0(samples,"_at")
samples<- (Wine2[,14])
pca_data$Sample <- paste0(samples,"_at")
paste0(samples,"_at")
pca_data$Sample <- paste0(samples$...14,"_at")
samples<- (Wine2[,14])
pca_data$Sample <- paste0(samples$...14,"_at")
pca_data$Sample <- paste0(samples$...14,"_sample")
samples<- (Wine2[,14])
pca_data$Sample <- paste0(samples$...14,"_sample")
ggplot(pca_data, aes(x = PC1, y = PC2, shape = Sample)) +
geom_point(size = 3) +
scale_shape_manual(values = c("circle", "triangle",'square')) +
theme_minimal() +
# geom_text(aes(label = rownames(pca_data)), size = 3, nudge_x = 0.1, nudge_y = -5) +
xlab(paste("PCA 1 (",round(explained_var[1],2),'%)')) +
ylab(paste("PCA 2 (",round(explained_var[2],2),'%)'))
ggplot(pca_data, aes(x = PC1, y = PC2, shape = Sample,color = Sample)) +
geom_point(size = 3) +
scale_shape_manual(values = c("circle", "triangle",'square')) +
theme_minimal() +
# geom_text(aes(label = rownames(pca_data)), size = 3, nudge_x = 0.1, nudge_y = -5) +
xlab(paste("PCA 1 (",round(explained_var[1],2),'%)')) +
ylab(paste("PCA 2 (",round(explained_var[2],2),'%)'))
Create a PCA plot
# Create a PCA plot
pca_data <- as.data.frame(principal_comp$x)
rownames(pca_data) <- colnames(lung_data_good)
# Create a PCA plot
pca_data <- as.data.frame(principal_comp$x)
samples<- (Wine2[,14])
pca_data$Sample <- paste0('Sample',samples$...14)
ggplot(pca_data, aes(x = PC1, y = PC2, shape = Sample,color = Sample)) +
geom_point(size = 3) +
scale_shape_manual(values = c("circle", "triangle",'square')) +
theme_minimal() +
# geom_text(aes(label = rownames(pca_data)), size = 3, nudge_x = 0.1, nudge_y = -5) +
xlab(paste("PCA 1 (",round(explained_var[1],2),'%)')) +
ylab(paste("PCA 2 (",round(explained_var[2],2),'%)'))
library(biomaRt)
mart <- useMart("ensembl", dataset="hsapiens_gene_ensembl")
shiny::runApp('Documents/Systems Biology/Programming/project')
shiny::runApp('Documents/Systems Biology/Programming/project')
remotes::install_gitlab(repo = "minerva/minervar", host = "gitlab.lcsb.uni.lu", dependencies = TRUE)
remotes::install_gitlab(repo = "minerva/minervar", host = "gitlab.lcsb.uni.lu", dependencies = TRUE)
install.packages(remotes)
install.packages('remotes')
library(remotes)
remotes::install_gitlab(repo = "minerva/minervar", host = "gitlab.lcsb.uni.lu", dependencies = TRUE)
View(pathways)
plab_components <- minervar::get_map_components("https://covid19map.elixir-luxembourg.org/minerva/api/", "COVID19 Disease Map")
remotes::install_gitlab(repo = "minerva/minervar", host = "gitlab.lcsb.uni.lu", dependencies = TRUE)
plab_components <- minervar::get_map_components("https://covid19map.elixir-luxembourg.org/minerva/api/", "COVID19 Disease Map")
plab_components <- minervar::get_map_components("https://covid19map.elixir-luxembourg.org/minerva/", "COVID19 Disease Map")
plab_components <- minervar::get_map_components("https://covid19map.elixir-luxembourg.org/minerva/api", "COVID19 Disease Map")
plab_components <- minervar::get_map_components("https://covid19map.elixir-luxembourg.org/minerva/api/", "COVID19 Disease Map")
curl 'https://covid19map.elixir-luxembourg.org/minerva/api/projects/' -X GET
library(remotes)
remotes::install_gitlab(repo = "minerva/minervar", host = "gitlab.lcsb.uni.lu", dependencies = TRUE)
plab_components <- minervar::get_map_components("https://covid19map.elixir-luxembourg.org/minerva/api/", "COVID19 Disease Map")
minervar::get_components_annotations(plab_components, "HGNC_SYMBOL", simple = FALSE)
plab_components <- minervar::get_map_components("https://covid19map.elixir-luxembourg.org/minerva/api/", "COVID19 Disease Map")
plab_components <- minervar::get_map_components("https://covid19map.elixir-luxembourg.org/minerva/api/", "COVID19 Disease Map")
library(remotes)
remotes::install_gitlab(repo = "minerva/minervar", host = "gitlab.lcsb.uni.lu", dependencies = TRUE)
plab_components <- minervar::get_map_components("https://pathwaylab.elixir-luxembourg.org/minerva/api/", "SLE_adhoc_annotated")
minervar::get_components_annotations(plab_components, "HGNC_SYMBOL", simple = FALSE)
plab_components <- minervar::get_map_components("https://pathwaylab.elixir-luxembourg.org/minerva/api/", "SLE_adhoc_annotated")
minervar::login('https://covid19map.elixir-luxembourg.org/minerva/api/doLogin')
plab_components <- minervar::get_map_components("https://pathwaylab.elixir-luxembourg.org/minerva/api/", "SLE_adhoc_annotated")
minervar::login('https://covid19map.elixir-luxembourg.org/minerva/api/doLogin')
minervar::login()
minervar::login("https://pathwaylab.elixir-luxembourg.org/minerva/api/")
plab_components <- minervar::get_map_components("https://pathwaylab.elixir-luxembourg.org/minerva/api/", "SLE_adhoc_annotated")
minervar::get_components_annotations(plab_components, "HGNC_SYMBOL", simple = FALSE)
plab_components <- minervar::get_map_components("https://pathwaylab.elixir-luxembourg.org/minerva/api/", "COVID19_disease_map")
plab_components <- minervar::get_map_components("https://pathwaylab.elixir-luxembourg.org/minerva/api/", "COVID19_disease_map")
minervar::get_components_annotations(plab_components, "HGNC_SYMBOL", simple = FALSE)
minervar::login("https://pathwaylab.elixir-luxembourg.org/minerva/api/")
plab_components <- minervar::get_map_components("https://pathwaylab.elixir-luxembourg.org/minerva/api/", "COVID19_disease_map",token = 'C0A46E11A620C26CF7888F5C811A4FC3')
View(pathways)
msm_all<- read_csv('/Users/alejandroadriaquelozano/Documents/HIV Lab/analysis/MSM + Hetero_MSM/MSM_all_new.csv')
library (readr)
library(questionr)
msm_all<- read_csv('/Users/alejandroadriaquelozano/Documents/HIV Lab/analysis/MSM + Hetero_MSM/MSM_all_new.csv')
for (x in country_list$country){
subset_hetero <- msm_all[msm_all$country == x,]
subset_hetero <-subset_hetero[subset_hetero$gen_iden == 'Male',]
subset_hetero <-subset_hetero[subset_hetero$sex_assig == 'Male',]
subset_hetero <-subset_hetero[subset_hetero$source_survey != 'MSM',]
print(dim(subset_hetero)[1])
}
setwd('/Users/alejandroadriaquelozano/Documents/Internships/MacsBio/')
read.csv('results2.xlsx')
setwd('/Users/alejandroadriaquelozano/Documents/Internships/MacsBio/post-covid-kg/Visualisation of algorithms/')
read.csv('results2.csv')
install.packages(sjplot)
install.packages(sjPlot)
install.packages('sjPlot')
library('sjPLot')
library('sjPlot')
setwd('/Users/alejandroadriaquelozano/Documents/Internships/MacsBio/post-covid-kg/Visualisation of algorithms/')
restults <- read.csv('results2.csv')
results <- read.csv('results2.csv')
sjt.df(results,
file="results2.doc")
library('sjPlot')
setwd('/Users/alejandroadriaquelozano/Documents/Internships/MacsBio/post-covid-kg/Visualisation of algorithms/')
results <- read.csv('results2.csv')
sjt.df(results,
file="results2.doc")
sjtab(results,
file="results2.doc")
sjt.xtab(results,
file="results2.html")
install.packages('stargazer')
library('stargazer')
stargazer(results,
type = "html",
out="results2.doc")
install.packages("knitr")
install.packages("kableExtra")
install.packages("knitr")
kable_styled <- kable(results, format = "html", caption = "Example Table") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
library(dplyr)
kable_styled <- kable(results, format = "html", caption = "Example Table") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
kable_styled <- kable(results, format = "html", caption = "Example Table")
library(kableExtra)
library(dplyr)
setwd('/Users/alejandroadriaquelozano/Documents/Internships/MacsBio/post-covid-kg/Visualisation of algorithms/')
results <- read.csv('results2.csv')
kable_styled <- kable(results, format = "html", caption = "Example Table")
View(results)
results <- results[10,]
results <- read.csv('results2.csv')
results <- results[,10]
results <- results[,1:10]
results <- read.csv('results2.csv')
results <- results[1:10,]
kable_styled <- kable(results, format = "html", caption = "Example Table")
kable_styled <- kable(results, format = "html")
kable_styled <- kable(results)
View(results)
library(xtable)
# Print to LaTeX
print(xtable(results, caption="Example Table"), type = "latex")
# Export to file
print(xtable(df, caption="Example Table"), type = "latex", file="table.tex")
# Export to file
print(xtable(results, caption="Example Table"), type = "latex", file="table.tex")
# Print to LaTeX
print(xtable(results, caption="Example Table"), type = "latex")
library(gridExtra)
library(dplyr)
setwd('/Users/alejandroadriaquelozano/Documents/Internships/MacsBio/post-covid-kg/Visualisation of algorithms/')
results <- read.csv('results2.csv')
results <- results[1:10,]
png("test.png", height = 50*nrow(df), width = 200*ncol(df))
png("test.png", height = 50*nrow(results), width = 200*ncol(results))
grid.table(df)
grid.table(results)
dev.off()
png("test.png")
grid.table(results)
dev.off()
library(knitr)
library(gridExtra)
library(dplyr)
setwd('/Users/alejandroadriaquelozano/Documents/Internships/MacsBio/post-covid-kg/Visualisation of algorithms/')
results <- read.csv('results2.csv')
results <- results[1:10,]
png("test.png")
grid.table(results)
dev.off()
table <- kable(results, format = "html", align = c("left", "center", "center", "center"),
caption = "Beautiful Simple Table") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
full_width = F, font_size = 12) %>%
column_spec(1, bold = T, color = "red") %>%
column_spec(2, width = "50px") %>%
column_spec(3, width = "100px") %>%
column_spec(4, width = "100px", color = "blue")
# Create a table using kable and style it with kableExtra
table <- kable(results, format = "html", align = c("l", "c", "c", "c"),
caption = "Beautiful Simple Table") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
full_width = F, font_size = 12) %>%
column_spec(1, bold = T, color = "red") %>%
column_spec(2, width = "50px") %>%
column_spec(3, width = "100px") %>%
column_spec(4, width = "100px", color = "blue")
gt::gt(results)
install.packages('gt')
gt::gt(results)
setwd('/Users/alejandroadriaquelozano/Documents/Internships/MacsBio/post-covid-kg/Visualisation of algorithms/')
results <- read.csv('results2.csv')
results <- results[1:10,]
gt::gt(results)
results <- read.csv('results1_09 copy.csv')
results <- results[1:10,]
gt::gt(result)
results <- read.csv('results1_09 copy.csv')
results <- results[1:10,]
gt::gt(result)
gt::gt(results)
# Creating the DataFrame
data <- data.frame(
Group = c(1, 1, 1, 2, 2, 2, 2, 3, 3, 3),
Values = sample(1:30, 10, replace = TRUE)  # example values, replace as necessary
)
# Creating the gt table with grouped and combined rows
gt_table <- gt(data) %>%
cols_label(
Group = "Group",
Values = "Values"
) %>%
tab_spanner(
label = "Data Summary",
columns = vars(Group, Values)
) %>%
tab_row_group(
group = "Group",
rows = data$Group
)
